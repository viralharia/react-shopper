{"version":3,"sources":["Nav.js","static-data.js","Item.js","ItemPage.js","CartPage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","activeTab","onTabChange","className","onClick","items","id","name","description","price","Item","item","children","ItemPage","onAddToCart","map","key","CartPage","onAddOne","onRemoveOne","length","count","reduce","total","App","state","cart","handleAddToCart","setState","handleRemoveOne","index","indexOf","slice","handleTabChange","itemCounts","this","itemId","cartItems","Object","keys","find","parseInt","renderCart","renderContent","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.659bd614.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = ({ activeTab, onTabChange}) => {\r\n    return (\r\n        <nav className=\"App-nav\">\r\n            <ul>\r\n                <li className={`App-nav-item ${activeTab === 0 && 'selected'}`}>\r\n                    <a onClick={() => onTabChange(0)}>Items</a></li>\r\n                <li className={`App-nav-item ${activeTab === 1 && 'selected'}`}>\r\n                <a onClick={() => onTabChange(1)}>Cart</a></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","let items = [\n    {\n      id: 0,\n      name: \"Apple iPad Mini 2 16GB\",\n      description: \"An iPad like no other. 16GB, WiFi, 4G.\",\n      price: 229.00\n    },\n    {\n      id: 1,\n      name: \"Apple iPad Mini 2 32GB\",\n      description: \"Even larger than the 16GB.\",\n      price: 279.00\n    },\n    {\n      id: 2,\n      name: \"Canon T7i\",\n      description: \"DSLR camera with lots of megapixels.\",\n      price: 749.99\n    },\n    {\n      id: 3,\n      name: \"Apple Watch Sport\",\n      description: \"A watch\",\n      price: 249.99\n    },\n    {\n      id: 4,\n      name: \"Apple Watch Silver\",\n      description: \"A more expensive watch\",\n      price: 599.99\n    }\n  ];\n  \n  export {items};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Item.css';\n\nfunction Item ({ item, children}){\n    return (\n        <div className=\"Item\">\n            <div className=\"Item-left\">\n                <div className=\"Item-image\" />\n                <div className=\"Item-title\">\n                    {item.name}\n                </div>\n                <div className=\"Item-description\">\n                    {item.description}\n                </div>\n            </div>\n\n            <div className=\"Item-right\">                \n                <div className=\"Item-price\">\n                   ${item.price}\n                </div>\n                {children}\n            </div>\n        </div>\n    )\n}\nItem.propTypes = {\n    item: PropTypes.object.isRequired,\n    children: PropTypes.node\n}\n\nexport default Item;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Item from './Item';\nimport './ItemPage.css';\n\nfunction ItemPage({ items, onAddToCart }){\n    return(\n        <ul className=\"ItemPage-items\">\n            {items.map(item => \n                <li key={item.id} className=\"ItemPage-item\">\n                    <Item item={item}>\n                        <button\n                            className=\"Item-addToCart\"\n                            onClick={() => onAddToCart(item)}>\n                            Add to Cart\n                        </button>\n                    </Item>\n                    \n                </li>\n            )}\n        </ul>\n    );\n}\nItemPage.propTypes = {\n    items: PropTypes.array.isRequired,\n    onAddToCart: PropTypes.func.isRequired\n}\n\nexport default ItemPage;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Item from './Item';\nimport './CartPage.css';\n\nfunction emptyCart(){\n    return (\n        <div className=\"Empty-Cart\">\n            <p>Your cart is empty.</p>\n            <p>Why not add some expensive products to it?</p>\n        </div>\n    );\n}\n\nfunction CartPage({ items, onAddOne, onRemoveOne }){\n    if(items.length === 0){\n        return emptyCart();\n    }else{\n        return ( items.length >= 1 &&\n            <div className=\"CartPage\">\n                <ul className=\"CartPage-items\">\n                    {items.map(item =>\n                        <li key={item.id} className=\"CartPage-item\">\n                            <Item item={item}>\n                            <div className=\"CartItem-controls\">\n                                <button\n                                    className=\"CartItem-removeOne\"\n                                    onClick={() => onRemoveOne(item)}>&ndash;\n                                    </button>\n                                    <span className=\"CartItem-count\">{item.count}</span>\n                                <button\n                                    className=\"CartItem-addOne\"\n                                    onClick={() => onAddOne(item)}>+\n                                    </button>\n                            </div>\n                            </Item>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"Total-CartValue\">\n                    Total: ${items.reduce((total, item) => {\n                        return (total += (item.price * item.count));\n                    },0)}\n                </div>   \n            </div>\n            \n        );\n    }\n\n    \n}\nCartPage.propTypes = {\n    items: PropTypes.array.isRequired,\n    onAddOne: PropTypes.func.isRequired,\n    onRemoveOne: PropTypes.func.isRequired\n};\n\nexport default CartPage;\n","import React from 'react';\nimport Nav from './Nav';\nimport {items} from './static-data';\nimport ItemPage from './ItemPage';\nimport CartPage from './CartPage';\nimport './App.css';\n\nclass App extends React.Component{\n\n  state = {\n    activeTab: 0,\n    cart: []\n  };\n\n  handleAddToCart = (item) => {\n    this.setState({\n      cart: [...this.state.cart, item.id]\n    });\n  }\n\n  handleRemoveOne = (item) => {\n    let index = this.state.cart.indexOf(item.id);\n    this.setState({\n      cart: [\n        ...this.state.cart.slice(0, index),\n        ...this.state.cart.slice(index + 1)\n      ]\n    });\n  }\n\n  handleTabChange = (index) => {\n    this.setState({\n      activeTab: index\n    });\n  }\n\n  renderCart(){\n    // Count how many of each item is in the cart\n    let itemCounts = this.state.cart.reduce((itemCounts, itemId) => {\n      itemCounts[itemId] = itemCounts[itemId] || 0;\n      itemCounts[itemId]++;\n      return itemCounts;\n    }, {});\n\n    let cartItems = Object.keys(itemCounts).map(itemId => {\n      let item = items.find(item => item.id === parseInt(itemId, 10));\n\n      return {\n        ...item,\n        count: itemCounts[itemId]\n      }\n    });\n\n    return (\n      <CartPage items={cartItems} \n      onAddOne={this.handleAddToCart}\n      onRemoveOne={this.handleRemoveOne}/>\n    )\n  }\n\n  renderContent(){\n    \n    switch(this.state.activeTab){\n      default:\n      case 0 : return (\n        <ItemPage items = {items} \n          onAddToCart={this.handleAddToCart}/>\n      );\n      case 1 : return this.renderCart();\n    }\n  }\n\n  render(){\n    let {activeTab} = this.state;\n    return (\n      <div className=\"App\">\n        <Nav activeTab={activeTab} onTabChange={this.handleTabChange}/>\n        <main className=\"App-content\">\n          {this.renderContent()}\n        </main>        \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}